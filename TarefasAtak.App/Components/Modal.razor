@inject HttpClient Http
@inject TarefaServico TarefaServico
@inject IJSRuntime JSRuntime

@if (_model is not null)
{
    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Cadastre sua tarefa</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@_model" OnValidSubmit="@OnValidSubmitAsync">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="titulo" class="col-form-label">Titulo</label>
                            <InputText type="type" class="form-control" name="titulo" @bind-Value="@_model.Titulo" />
                            <ValidationMessage For="@(() => _model.Titulo)" />
                        </div>
                        <div class="form-group">
                            <label for="descricao" class="col-form-label">Descrição</label>
                            <InputText type="type" class="form-control" name="descricao" @bind-Value="@_model.Descricao" />
                            <ValidationMessage For="@(() => _model.Descricao)" />
                        </div>
                        <div>
                            <label for="status" class="col-form-label">Status</label>
                            <InputSelect class="form-control" @bind-Value="_model.Status">
                                @foreach (var status in Enum.GetValues(typeof(Status)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                        @if (!formularioValidado)
                        {
                            <button type="submit" class="btn btn-primary">Validar</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="@SalvarSubmitAsync">Salvar</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [EditorRequired]
    public TarefaCommand _model { get; set; } = new();
    public TarefaCommand modelValidado { get; set; } = new();
    public CommandResult<TarefaCommand> result;
    [Parameter]
    [EditorRequired]
    public bool Editar { get; set; }
    [Parameter]
    [EditorRequired]
    public EventCallback<CommandResult<TarefaCommand>> OnSubmitCallback { get; set; }
    public bool formularioValidado = false;
    private async Task SalvarSubmitAsync()
    {
        if (Editar)
        {
            result = await TarefaServico.UpdateAsync(modelValidado);
            if (!result.Success)
            {
                result.Data = new TarefaCommand();
            }
        }
        else
        {
            result = await TarefaServico.CreateAsync(modelValidado);
            if (!result.Success)
            {
                result.Data = new TarefaCommand();
            }
        }
        await OnSubmitCallback.InvokeAsync(result);
        _model = new();
        formularioValidado = false;
    }
    private async Task OnValidSubmitAsync()
    {
        formularioValidado = true;
        modelValidado = _model;
    }
}
