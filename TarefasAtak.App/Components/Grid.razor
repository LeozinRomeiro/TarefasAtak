@inject HttpClient Http
@inject TarefaServico TarefaServico

<PageTitle>Tarefas</PageTitle>

<h1>Tarefas</h1>

@if (tarefas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                @if (!string.IsNullOrEmpty(logMessage))
                {
                    <div class="alert alert-@logMessageType" role="alert">
                        @logMessage
                    </div>
                }
            </div>
        </div>
        <div class="row button-container">
            <div class="dashboard col">
                <button type="button" @onclick="(e => Inserir())" class="btn btn-outline-success" data-toggle="modal" data-target="#modal">
                    <div class="button-div">
                        <svg xmlns="http://www.w3.org/2000/svg" id="btnEditar" width="32" height="32" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                        </svg>
                        Inserir
                    </div>
                </button>
                <button type="button" @onclick="(e => Editar())" class="btn btn-outline-primary" data-toggle="modal" data-target="@validarTarefa()">
                    <div class="button-div">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                        </svg>
                        Editar
                    </div>
                </button>
                <button type="button" @onclick="(e => Excluir(false))" class="btn btn-outline-danger" data-toggle="modal" data-target="#confirmDeleteModal">
                    <div class="button-div">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                        Excluir
                    </div>
                </button>
                <button type="button" @onclick="(e => AtualizarAsync())" class="btn btn-secondary">
                    <div class="button-div">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                        </svg>
                        Atualizar
                    </div>
                </button>
            </div>
        </div>
        <div class="row">
            <div class="col task-grid">
                <table>
                    <thead>
                        <tr>
                            <th>Título</th>
                            <th>Descrição</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tarefa in tarefas)
                        {
                            <tr @onclick="() => SelectTarefa(tarefa)" style="background-color: @(selectedTarefa == tarefa ? "lightgray" : "")">
                                <td>@tarefa.Titulo</td>
                                <td>@tarefa.Descricao</td>
                                <td>@tarefa.Status</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <ModalConfirm Confirme="@ExcluirConfirm"></ModalConfirm>
            </div>
        </div>
    </div>
    <Modal _model="@selectedTarefa" Editar="@editar" OnSubmitCallback="@UpdateTarefas"></Modal>
}

@code {
    private CommandResult<List<TarefaCommand>> result;
    private List<TarefaCommand> tarefas = new();
    private TarefaCommand selectedTarefa = new();
    public bool editar = false;
    private string logMessage = "";
    private string logMessageType = "success";
    private string validarTarefa(){
        if(tarefas.Exists(t => t.Id.Equals(selectedTarefa.Id)))
        {
            return "#modal";
        }
        return string.Empty;
    }

    private async Task UpdateTarefas(CommandResult<TarefaCommand> result)
    {
        if (result.Success)
        {
            await AtualizarAsync();
            logMessage = result.Message;
        }
    }

    private async Task ExcluirConfirm(bool confirm)
    {
        await Excluir(confirm);
    }
    protected override async Task OnInitializedAsync()
    {
        await AtualizarAsync();
    }

    private void SelectTarefa(TarefaCommand tarefa)
    {
        if (selectedTarefa == tarefa)
        {
            selectedTarefa = new();
            editar = false;
        }
        else
        {
            selectedTarefa = tarefa;
            editar = true;
        }
    }

    public void Inserir()
    {
        selectedTarefa = new();
    }

    public void Editar()
    {
        if (validarTarefa()==string.Empty)
        {
            logMessage = "Selecione uma tarefa para edita-la";
        }
    }

    public async Task Excluir(bool confirmado)
    {
        if (selectedTarefa != null && selectedTarefa.Id != Guid.Empty)
        {
            if (confirmado)
            {
                var result = await TarefaServico.DeleteAsync(selectedTarefa.Id);
                logMessage = result.Message;
                await AtualizarAsync();
            }
        }
    }

    private async Task AtualizarAsync()
    {
        result = await TarefaServico.GetAsync();
        if (result.Success)
        {
            tarefas = result.Data;
        }
        logMessage = result.Message;
    }

}

